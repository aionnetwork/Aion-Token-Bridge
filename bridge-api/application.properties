# suppress inspection "UnusedProperty" for whole file
# https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html

# mysql connection properties
spring.datasource.url=jdbc:mysql://localhost:3306/bridgev4?useSSL=false
spring.datasource.username=root
spring.datasource.password=

# application properties
aion.bridge.maintenance=false

# HikariCP settings (default for spring boot 2.0.4
# Hikari will use the above plus the following to setup connection pooling:
# https://github.com/brettwooldridge/HikariCP/blob/dev/src/main/java/com/zaxxer/hikari/HikariConfig.java
# https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby
spring.datasource.hikari.maximumPoolSize=10

# logging settings

debug=false
trace=false

logging.file.max-history=40
logging.file.max-size=50MB
logging.file=logs/bridge-api.log

# logging.level.root=DEBUG
logging.level.bridge_api=DEBUG

# tomcat webserver configs

# https://medium.com/netflix-techblog/tuning-tomcat-for-a-high-throughput-fail-fast-system-e4d7b2fc163f
# https://devtidbits.com/2015/12/08/nginx-as-a-reverse-proxy-to-apache-tomcat/
# https://serverfault.com/questions/319195/configuring-nginx-and-tomcat-together
# https://ma.ttias.be/enable-keepalive-connections-in-nginx-upstream-proxy-configurations/
# https://tomcat.apache.org/tomcat-8.5-doc/config/http.html
# https://dzone.com/articles/ubuntu-installing-apache

server.address=127.0.0.1
server.port=8085
server.ssl.enabled=false

# maps to tomcat's keepAliveTimeout & connectionTimeout (20s)
server.connection-timeout=20000

# max connections - NIO: 10000, APR/native: 8192; let Tomcat pick the default
# server.tomcat.max-connections=

# maps to tomcat's maxThreads
server.tomcat.max-threads=200
