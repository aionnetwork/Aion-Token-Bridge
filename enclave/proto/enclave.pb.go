// Code generated by protoc-gen-go. DO NOT EDIT.
// source: enclave.proto

package enclave

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SignRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignRequest) Reset()         { *m = SignRequest{} }
func (m *SignRequest) String() string { return proto.CompactTextString(m) }
func (*SignRequest) ProtoMessage()    {}
func (*SignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_enclave_3cfe0df37f2c9009, []int{0}
}
func (m *SignRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignRequest.Unmarshal(m, b)
}
func (m *SignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignRequest.Marshal(b, m, deterministic)
}
func (dst *SignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignRequest.Merge(dst, src)
}
func (m *SignRequest) XXX_Size() int {
	return xxx_messageInfo_SignRequest.Size(m)
}
func (m *SignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignRequest proto.InternalMessageInfo

func (m *SignRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SignedResponse struct {
	SignedData           []byte   `protobuf:"bytes,1,opt,name=signedData,proto3" json:"signedData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedResponse) Reset()         { *m = SignedResponse{} }
func (m *SignedResponse) String() string { return proto.CompactTextString(m) }
func (*SignedResponse) ProtoMessage()    {}
func (*SignedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_enclave_3cfe0df37f2c9009, []int{1}
}
func (m *SignedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedResponse.Unmarshal(m, b)
}
func (m *SignedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedResponse.Marshal(b, m, deterministic)
}
func (dst *SignedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedResponse.Merge(dst, src)
}
func (m *SignedResponse) XXX_Size() int {
	return xxx_messageInfo_SignedResponse.Size(m)
}
func (m *SignedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignedResponse proto.InternalMessageInfo

func (m *SignedResponse) GetSignedData() []byte {
	if m != nil {
		return m.SignedData
	}
	return nil
}

func init() {
	proto.RegisterType((*SignRequest)(nil), "SignRequest")
	proto.RegisterType((*SignedResponse)(nil), "SignedResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EnclaveServiceClient is the client API for EnclaveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EnclaveServiceClient interface {
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignedResponse, error)
}

type enclaveServiceClient struct {
	cc *grpc.ClientConn
}

func NewEnclaveServiceClient(cc *grpc.ClientConn) EnclaveServiceClient {
	return &enclaveServiceClient{cc}
}

func (c *enclaveServiceClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignedResponse, error) {
	out := new(SignedResponse)
	err := c.cc.Invoke(ctx, "/EnclaveService/sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnclaveServiceServer is the server API for EnclaveService service.
type EnclaveServiceServer interface {
	Sign(context.Context, *SignRequest) (*SignedResponse, error)
}

func RegisterEnclaveServiceServer(s *grpc.Server, srv EnclaveServiceServer) {
	s.RegisterService(&_EnclaveService_serviceDesc, srv)
}

func _EnclaveService_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclaveServiceServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EnclaveService/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclaveServiceServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnclaveService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "EnclaveService",
	HandlerType: (*EnclaveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sign",
			Handler:    _EnclaveService_Sign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enclave.proto",
}

func init() { proto.RegisterFile("enclave.proto", fileDescriptor_enclave_3cfe0df37f2c9009) }

var fileDescriptor_enclave_3cfe0df37f2c9009 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xcd, 0x4b, 0xce,
	0x49, 0x2c, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe4, 0xe2, 0x0e, 0xce, 0x4c,
	0xcf, 0x0b, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49,
	0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3, 0x95, 0x0c, 0xb8, 0xf8, 0x40, 0x4a, 0x52,
	0x53, 0x82, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0xe4, 0xb8, 0xb8, 0x8a, 0xc1, 0x22,
	0x2e, 0x08, 0xb5, 0x48, 0x22, 0x46, 0x96, 0x5c, 0x7c, 0xae, 0x10, 0x5b, 0x82, 0x53, 0x8b, 0xca,
	0x32, 0x93, 0x53, 0x85, 0xd4, 0xb9, 0x58, 0x40, 0xf2, 0x42, 0x3c, 0x7a, 0x48, 0xb6, 0x49, 0xf1,
	0xeb, 0xa1, 0x1a, 0xac, 0xc4, 0xe0, 0x64, 0xc4, 0x25, 0x93, 0x5f, 0x94, 0xae, 0x97, 0x98, 0x99,
	0x9f, 0xa7, 0x97, 0x54, 0x94, 0x99, 0x92, 0x9e, 0xaa, 0x97, 0x5e, 0x54, 0x90, 0xac, 0x07, 0x75,
	0xb5, 0x13, 0x3b, 0xd4, 0xe0, 0x00, 0xc6, 0x28, 0x76, 0xa8, 0x58, 0x12, 0x1b, 0xd8, 0x2b, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x1f, 0xdd, 0xcf, 0xdb, 0x00, 0x00, 0x00,
}
